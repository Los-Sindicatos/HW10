import numpy as np
import random as rnd

import sys,math
from PyQt5.QtWidgets import QDialog, QApplication, QSlider
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from PyQt5.QtGui import QCursor, QColor
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtOpenGL import QGL, QGLFormat, QGLWidget

from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *

     #name of file    has this in file
from HW_10 import Ui_MainWindow

class main_window(QDialog):

    def __init__(self):
        super(main_window, self).__init__()
        self.Truss = None
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.assign_widgets()
        self.show()

    def assign_widgets(self):
        import subprocess
        self.ui.OpenButton.clicked.connect(subprocess.Popen(r'explorer /select,"C:\path\of\folder\file"'))
        self.ui.OpenButton.clicked.connect(self.readtruss)

        # initialize openGL
        self.ui.openGLWidget.initializeGL = self.initGL
        self.ui.openGLWidget.paintGL = self.paintGL
        self.ui.openGLWidgetTwo.paintGL = self.paintGLTwo

    def updateWindows(self):
        self.ui.openGLWidget.update()
        self.ui.openGLWidgetTwo.update()

    def Zooming(self):
        self.Zoom = float(self.ui.horizontalSliderFour.value()/33)
        self.updateWindows()

    def RedChange(self):
        self.Red = self.ui.horizontalSlider.value()/100
        self.updateWindows()

    def GreenChange(self):
        self.Green = self.ui.horizontalSliderTwo.value()/100
        self.updateWindows()

    def BlueChange(self):
        self.Blue = self.ui.horizontalSliderThree.value()/100
        self.updateWindows()

    def readTruss(self):
        self.Truss = Truss() #create a truss object
        self.Truss.x0, self.Truss.y0, self.Truss.xf, self.Truss.yf = np.loadtxt('trussOne.txt',skiprows=1,unpack=True)
        self.Red = self.ui.horizontalSlider.value()/100
        self.Blue = self.ui.horizontalSliderThree.value()/100
        self.Green = self.ui.horizontalSliderTwo.value()/100
        self.updateWindows()

    def initGL(self):
        glutInit(sys.argv)

    def paintGL(self,zoomval = None):
        # setup the drawing window size and scaling
        aspect = float(350) / float(350)
        glViewport(0, 0, 361, 361)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        glOrtho(-aspect * 5, aspect * 5, -7, 3, -1, 1)
        glClearColor(0.65,0.65,0.65,0)
        glClear(GL_COLOR_BUFFER_BIT )
        # set the zoom from the slider value (or from zoomval)
        if zoomval == None:
            glScalef(self.Zoom,self.Zoom,1)
        else:
            glScalef(zoomval,zoomval,1)
        # draw everything
        if self.Truss != None:
            self.drawTruss(self.Truss.x0,self.Truss.y0,self.Truss.xf,self.Truss.yf)

    def paintGLTwo(self):
        self.paintGL(zoomval = 2)

    def drawTruss(self,x0,y0,xf,yf):
        # draw the truss links
        glLineWidth(4)
        glColor3f(self.Red,self.Green,self.Blue)
        glBegin(GL_LINES)  #begin drawing disconnected lines
        # draw each line by giving the starting point and the ending point
        for i in range(len(x0)):
            glVertex2f(x0[i],y0[i])
            glVertex2f(xf[i],yf[i])
        glEnd()
        # draw the labels on the truss links
        glColor3f(1,1,1)
        for i in range(len(x0)):
            self.drawText(str(i), (x0[i]+xf[i])/2, (y0[i]+yf[i])/2)
        # end drawTruss

    def drawText(self, text, x, y):
        glRasterPos2d(x,y)
        for ch in text:
            glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12, ord(ch))
    # end


if __name__ == "__main__":
    app = QApplication.instance()
    if not app:
        app = QApplication(sys.argv)
    app.aboutToQuit.connect(app.deleteLater)
    main_win = main_window()
    sys.exit(app.exec_())







