import numpy as np
import random as rnd

import sys,math
from PyQt5.QtWidgets import QDialog, QApplication, QSlider
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from PyQt5.QtGui import QCursor, QColor
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtOpenGL import QGL, QGLFormat, QGLWidget

from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *

     #name of file    has this in file
from HW_10 import Ui_MainWindow


class main_window(QDialog):

    def __init__(self):
        super(main_window, self).__init__()
        self.Truss = None
        self.color = 1
        self.Red = 1
        self.Green = 1
        self.Blue = 1
        self.Zoom = 1
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.assign_widgets()
        self.show()

    def assign_widgets(self):
        import subprocess
        self.ui.OpenButton.clicked.connect(subprocess.Popen(r'explorer /select,"C:\path\of\folder\file"'))
        self.ui.OpenButton.clicked.connect(self.readtruss)

    

    def updateWindows(self):
        self.ui.openGLWidget.update()
        self.ui.openGLWidgetTwo.update()

    def readTruss(self):
        self.Truss.x0, self.Truss.y0, self.Truss.xf, self.Truss.yf = np.loadtxt('trussOne.txt',skiprows=1,unpack=True)
        
        self.updateWindows()

    def initGL(self):
        glutInit(sys.argv)

    def paintGL(self,zoomval = None):
        # setup the drawing window size and scaling
        aspect = float(350) / float(350)
        glViewport(0, 0, 361, 361)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        glOrtho(-aspect * 5, aspect * 5, -7, 3, -1, 1)
        glClearColor(0.65,0.65,0.65,0)
        glClear(GL_COLOR_BUFFER_BIT )
        # set the zoom from the slider value (or from zoomval)
        if zoomval == None:
            glScalef(self.Zoom,self.Zoom,1)
        else:
            glScalef(zoomval,zoomval,1)
        # draw everything
        if self.Truss != None:
            self.drawTruss(self.Truss.x0,self.Truss.y0,self.Truss.xf,self.Truss.yf)



    # end


if __name__ == "__main__":
    app = QApplication.instance()
    if not app:
        app = QApplication(sys.argv)
    app.aboutToQuit.connect(app.deleteLater)
    main_win = main_window()
    sys.exit(app.exec_())







